# Copyright (c) 2024 FRC Team 1678: Citrus Circuits

from unittest import mock
from unittest.mock import patch

import logging

with mock.patch("logging.getLogger", side_effect=logging.getLogger):
    from calculations import base_calculations
    from calculations import obj_tims
    from server import Server
import pytest


@pytest.mark.clouddb
class TestObjTIMCalcs:
    tba_test_data = [
        {
            "match_number": 42,
            "actual_time": 1100291640,
            "comp_level": "qm",
            "score_breakdown": {
                "blue": {
                    "foulPoints": 8,
                    "autoMobilityPoints": 15,
                    "autoGamePiecePoints": 12,
                    "teleopGamePiecePoints": 40,
                    "autoCommunity": {
                        "B": [
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                        ],
                        "M": [
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                        ],
                        "T": [
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "Cube",
                            "Cone",
                        ],
                    },
                    "teleopCommunity": {
                        "B": [
                            "Cone",
                            "Cube",
                            "None",
                            "Cone",
                            "Cube",
                            "Cube",
                            "Cube",
                            "Cube",
                            "None",
                        ],
                        "M": [
                            "None",
                            "None",
                            "None",
                            "Cone",
                            "Cube",
                            "None",
                            "None",
                            "None",
                            "None",
                        ],
                        "T": [
                            "Cone",
                            "Cube",
                            "Cone",
                            "None",
                            "None",
                            "None",
                            "Cone",
                            "Cube",
                            "Cone",
                        ],
                    },
                },
                "red": {
                    "foulPoints": 10,
                    "autoMobilityPoints": 0,
                    "autoGamePiecePoints": 6,
                    "teleopGamePiecePoints": 63,
                    "autoCommunity": {
                        "B": [
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                        ],
                        "M": [
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                        ],
                        "T": [
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "None",
                            "Cone",
                        ],
                    },
                    "teleopCommunity": {
                        "B": [
                            "Cone",
                            "Cube",
                            "Cube",
                            "Cone",
                            "Cube",
                            "Cube",
                            "Cube",
                            "Cube",
                            "None",
                        ],
                        "M": [
                            "None",
                            "None",
                            "Cone",
                            "Cone",
                            "Cube",
                            "None",
                            "None",
                            "None",
                            "None",
                        ],
                        "T": [
                            "Cone",
                            "Cube",
                            "Cone",
                            "Cone",
                            "Cube",
                            "Cone",
                            "Cone",
                            "Cube",
                            "Cone",
                        ],
                    },
                },
            },
            "alliances": {
                "blue": {
                    "team_keys": [
                        "frc254",
                    ]
                },
                "red": {
                    "team_keys": [
                        "frc254",
                    ]
                },
            },
        },
    ]
    unconsolidated_totals = [
        {
            "alliance_color_is_red": True,
            "auto_coral_L1": 0,
            "auto_coral_L2": 0,
            "auto_coral_L3": 1,
            "auto_coral_L4": 1,
            "auto_drop_algae": 0,
            "auto_drop_coral": 0,
            "auto_fail_coral_L1": 0,
            "auto_fail_coral_L2": 0,
            "auto_fail_coral_L3": 0,
            "auto_fail_coral_L4": 0,
            "auto_fail_net": 0,
            "auto_fail_processor": 0,
            "auto_intake_ground_algae": 0,
            "auto_intake_ground_coral": 1,
            "auto_intake_reef": 1,
            "auto_intake_station": 0,
            "auto_intakes_ground": 1,
            "auto_net": 0,
            "auto_processor": 1,
            "auto_total_failed_pieces": 0,
            "auto_total_intakes": 2,
            "auto_total_pieces": 3,
            "cage_fail": False,
            "cage_level": "N",
            "expected_cycle_time": 135.0,
            "expected_cycles": 1,
            "has_preload": True,
            "match_number": 42,
            "median_cycle_time": 0,
            "scored_preload": False,
            "scout_name": "EDWIN",
            "start_position": "1",
            "team_number": "254",
            "tele_coral_L1": 1,
            "tele_coral_L2": 2,
            "tele_coral_L3": 2,
            "tele_coral_L4": 2,
            "tele_drop_algae": 0,
            "tele_drop_coral": 0,
            "tele_fail_coral_L1": 0,
            "tele_fail_coral_L2": 1,
            "tele_fail_coral_L3": 0,
            "tele_fail_coral_L4": 0,
            "tele_fail_net": 0,
            "tele_fail_processor": 0,
            "tele_incap": 0,
            "tele_intake_ground_algae": 0,
            "tele_intake_ground_coral": 0,
            "tele_intake_reef": 42,
            "tele_intake_poach": 0,
            "tele_intake_station": 1,
            "tele_net": 12,
            "tele_processor": 1,
            "tele_total_failed_pieces": 0,
            "tele_total_intakes": 1,
            "tele_total_pieces": 9,
            "time_from_ground_to_net": 0,
            "time_from_ground_to_processor": 0,
            "time_from_ground_to_reef": 0,
            "time_from_reef_to_net": 0,
            "time_from_reef_to_processor": 0,
            "time_from_station_to_reef": 7,
            "time_from_poach_to_net": 0,
            "time_from_poach_to_processor": 0,
            "time_from_poach_to_reef": 0,
            "total_intakes": 3,
            "total_pieces": 12,
            "total_failed_pieces": 0,
            "park": True,
        },
        {
            "alliance_color_is_red": True,
            "auto_coral_L1": 0,
            "auto_coral_L2": 0,
            "auto_coral_L3": 2,
            "auto_coral_L4": 2,
            "auto_drop_algae": 0,
            "auto_drop_coral": 0,
            "auto_fail_coral_L1": 0,
            "auto_fail_coral_L2": 0,
            "auto_fail_coral_L3": 0,
            "auto_fail_coral_L4": 0,
            "auto_fail_net": 0,
            "auto_fail_processor": 0,
            "auto_intake_ground_algae": 0,
            "auto_intake_ground_coral": 2,
            "auto_intake_reef": 2,
            "auto_intake_station": 0,
            "auto_intakes_ground": 2,
            "auto_net": 0,
            "auto_processor": 2,
            "auto_total_failed_pieces": 0,
            "auto_total_intakes": 3,
            "auto_total_pieces": 4,
            "cage_fail": False,
            "cage_level": "N",
            "expected_cycle_time": 135.0,
            "expected_cycles": 1,
            "has_preload": True,
            "match_number": 42,
            "median_cycle_time": 0,
            "scored_preload": False,
            "scout_name": "ADRIAN",
            "start_position": "1",
            "team_number": "254",
            "tele_coral_L1": 2,
            "tele_coral_L2": 3,
            "tele_coral_L3": 3,
            "tele_coral_L4": 3,
            "tele_drop_algae": 0,
            "tele_drop_coral": 0,
            "tele_fail_coral_L1": 0,
            "tele_fail_coral_L2": 2,
            "tele_fail_coral_L3": 0,
            "tele_fail_coral_L4": 0,
            "tele_fail_net": 0,
            "tele_fail_processor": 0,
            "tele_incap": 0,
            "tele_intake_ground_algae": 0,
            "tele_intake_ground_coral": 0,
            "tele_intake_reef": 42,
            "tele_intake_station": 2,
            "tele_intake_poach": 0,
            "tele_net": 13,
            "tele_processor": 2,
            "tele_total_failed_pieces": 0,
            "tele_total_intakes": 2,
            "tele_total_pieces": 10,
            "time_from_ground_to_net": 0,
            "time_from_ground_to_processor": 0,
            "time_from_ground_to_reef": 0,
            "time_from_reef_to_net": 0,
            "time_from_reef_to_processor": 0,
            "time_from_station_to_reef": 8,
            "time_from_poach_to_net": 0,
            "time_from_poach_to_processor": 0,
            "time_from_poach_to_reef": 0,
            "total_intakes": 4,
            "total_pieces": 13,
            "total_failed_pieces": 0,
            "park": True,
        },
        {
            "alliance_color_is_red": True,
            "auto_coral_L1": 1,
            "auto_coral_L2": 0,
            "auto_coral_L3": 3,
            "auto_coral_L4": 3,
            "auto_drop_algae": 0,
            "auto_drop_coral": 0,
            "auto_fail_coral_L1": 0,
            "auto_fail_coral_L2": 0,
            "auto_fail_coral_L3": 0,
            "auto_fail_coral_L4": 0,
            "auto_fail_net": 0,
            "auto_fail_processor": 0,
            "auto_intake_ground_algae": 0,
            "auto_intake_ground_coral": 3,
            "auto_intake_reef": 3,
            "auto_intake_station": 0,
            "auto_intakes_ground": 3,
            "auto_net": 0,
            "auto_processor": 3,
            "auto_total_failed_pieces": 0,
            "auto_total_intakes": 4,
            "auto_total_pieces": 5,
            "cage_fail": False,
            "cage_level": "N",
            "expected_cycle_time": 135.0,
            "expected_cycles": 3,
            "has_preload": True,
            "match_number": 45,
            "median_cycle_time": 0,
            "scored_preload": False,
            "scout_name": "RAY",
            "start_position": "1",
            "team_number": "254",
            "tele_coral_L1": 3,
            "tele_coral_L2": 4,
            "tele_coral_L3": 4,
            "tele_coral_L4": 4,
            "tele_drop_algae": 0,
            "tele_drop_coral": 0,
            "tele_fail_coral_L1": 0,
            "tele_fail_coral_L2": 3,
            "tele_fail_coral_L3": 0,
            "tele_fail_coral_L4": 0,
            "tele_fail_net": 0,
            "tele_fail_processor": 0,
            "tele_incap": 0,
            "tele_intake_ground_algae": 0,
            "tele_intake_ground_coral": 0,
            "tele_intake_reef": 44,
            "tele_intake_station": 3,
            "tele_intake_poach": 0,
            "tele_net": 14,
            "tele_processor": 3,
            "tele_total_failed_pieces": 0,
            "tele_total_intakes": 3,
            "tele_total_pieces": 11,
            "time_from_ground_to_net": 0,
            "time_from_ground_to_processor": 0,
            "time_from_ground_to_reef": 0,
            "time_from_reef_to_net": 0,
            "time_from_reef_to_processor": 0,
            "time_from_station_to_reef": 9,
            "time_from_poach_to_net": 0,
            "time_from_poach_to_processor": 0,
            "time_from_poach_to_reef": 0,
            "total_intakes": 5,
            "total_pieces": 14,
            "total_failed_pieces": 0,
            "park": True,
        },
    ]

    calculated_tim_data = {
        "alliance_color_is_red": True,
        "auto_coral_L1": 0,
        "auto_coral_L2": 0,
        "auto_coral_L3": 2,
        "auto_coral_L4": 2,
        "auto_drop_algae": 0,
        "auto_drop_coral": 0,
        "auto_fail_coral_L1": 0,
        "auto_fail_coral_L2": 0,
        "auto_fail_coral_L3": 0,
        "auto_fail_coral_L4": 0,
        "auto_fail_net": 0,
        "auto_fail_processor": 0,
        "auto_intake_ground_algae": 0,
        "auto_intake_ground_coral": 2,
        "auto_intake_reef": 2,
        "auto_intake_station": 0,
        "auto_intakes_ground": 2,
        "auto_net": 0,
        "auto_processor": 2,
        "auto_total_failed_pieces": 0,
        "auto_total_intakes": 3,
        "auto_total_pieces": 4,
        "cage_fail": False,
        "cage_level": "N",
        "expected_cycle_time": 135.0,
        "expected_cycles": 1.0,
        "has_preload": True,
        "match_number": 42,
        "median_cycle_time": 0,
        "scored_preload": False,
        "start_position": "1",
        "team_number": "254",
        "tele_coral_L1": 2,
        "tele_coral_L2": 3,
        "tele_coral_L3": 3,
        "tele_coral_L4": 3,
        "tele_drop_algae": 0,
        "tele_drop_coral": 0,
        "tele_fail_coral_L1": 0,
        "tele_fail_coral_L2": 2,
        "tele_fail_coral_L3": 0,
        "tele_fail_coral_L4": 0,
        "tele_fail_net": 0,
        "tele_fail_processor": 0,
        "tele_incap": 0,
        "tele_intake_ground_algae": 0,
        "tele_intake_ground_coral": 0,
        "tele_intake_reef": 42,
        "tele_intake_station": 2,
        "tele_intake_poach": 0,
        "tele_net": 13,
        "tele_processor": 2,
        "tele_total_failed_pieces": 0,
        "tele_total_intakes": 2,
        "tele_total_pieces": 10,
        "time_from_ground_to_net": 0,
        "time_from_ground_to_processor": 0,
        "time_from_ground_to_reef": 0,
        "time_from_reef_to_net": 0,
        "time_from_reef_to_processor": 0,
        "time_from_station_to_reef": 8,
        "time_from_poach_to_net": 0,
        "time_from_poach_to_processor": 0,
        "time_from_poach_to_reef": 0,
        "total_intakes": 4,
        "total_pieces": 13,
        "total_failed_pieces": 0,
        "deep": False,
        "shallow": False,
        "park": True,
    }

    @mock.patch.object(
        base_calculations.BaseCalculations, "get_teams_list", return_value=["3", "254", "1"]
    )
    def setup_method(self, method, get_teams_list_dummy):
        with mock.patch(
            "doozernet_communicator.check_model_availability", return_value=None
        ), patch("utils.get_match_schedule", return_value=[]), patch(
            "utils.get_team_list", return_value=["3", "254", "1"]
        ):
            self.test_server = Server()
        self.test_calculator = obj_tims.ObjTIMCalcs(self.test_server)

    def test_modes(self):
        assert self.test_calculator.modes([3, 3, 3]) == [3]
        assert not self.test_calculator.modes([])
        assert self.test_calculator.modes([1, 1, 2, 2]) == [1, 2]
        assert self.test_calculator.modes([1, 1, 2, 2, 3]) == [1, 2]
        assert self.test_calculator.modes([1, 2, 3, 1]) == [1]
        assert self.test_calculator.modes([1, 4, 3, 4]) == [4]
        assert self.test_calculator.modes([9, 6, 3, 9]) == [9]

    def test_consolidate_nums(self):
        assert self.test_calculator.consolidate_nums([3, 3, 3]) == 3
        assert self.test_calculator.consolidate_nums([4, 4, 4, 4, 1]) == 4
        assert self.test_calculator.consolidate_nums([2, 2, 1]) == 2
        assert self.test_calculator.consolidate_nums([]) == 0

    def test_consolidate_bools(self):
        assert self.test_calculator.consolidate_bools([True, True, True]) == True
        assert self.test_calculator.consolidate_bools([False, True, True]) == True
        assert self.test_calculator.consolidate_bools([False, False, True]) == False
        assert self.test_calculator.consolidate_bools([False, False, False]) == False

    def test_consolidate_totals(self):
        result = self.test_calculator.consolidate_totals(self.unconsolidated_totals)
        assert result == {
            "auto_coral_L1": 0,
            "auto_coral_L2": 0,
            "auto_coral_L3": 2,
            "auto_coral_L4": 2,
            "auto_drop_algae": 0,
            "auto_drop_coral": 0,
            "auto_fail_coral_L1": 0,
            "auto_fail_coral_L2": 0,
            "auto_fail_coral_L3": 0,
            "auto_fail_coral_L4": 0,
            "auto_fail_net": 0,
            "auto_fail_processor": 0,
            "auto_intake_ground_algae": 0,
            "auto_intake_ground_coral": 2,
            "auto_intake_reef": 2,
            "auto_intake_station": 0,
            "auto_intakes_ground": 2,
            "auto_net": 0,
            "auto_processor": 2,
            "auto_total_failed_pieces": 0,
            "auto_total_intakes": 3,
            "auto_total_pieces": 4,
            "cage_fail": False,
            "cage_level": "N",
            "expected_cycle_time": 135.0,
            "expected_cycles": 1,
            "has_preload": True,
            "scored_preload": False,
            "median_cycle_time": 0,
            "start_position": "1",
            "tele_coral_L1": 2,
            "tele_coral_L2": 3,
            "tele_coral_L3": 3,
            "tele_coral_L4": 3,
            "tele_drop_algae": 0,
            "tele_drop_coral": 0,
            "tele_fail_coral_L1": 0,
            "tele_fail_coral_L2": 2,
            "tele_fail_coral_L3": 0,
            "tele_fail_coral_L4": 0,
            "tele_fail_net": 0,
            "tele_fail_processor": 0,
            "tele_incap": 0,
            "tele_intake_ground_algae": 0,
            "tele_intake_ground_coral": 0,
            "tele_intake_reef": 42,
            "tele_intake_station": 2,
            "tele_intake_poach": 0,
            "tele_net": 13,
            "tele_processor": 2,
            "tele_total_failed_pieces": 0,
            "tele_total_intakes": 2,
            "tele_total_pieces": 10,
            "total_intakes": 4,
            "total_pieces": 13,
            "total_failed_pieces": 0,
            "park": True,
        }

    def test_calculate_aggregates(self):
        aggregated_values = self.test_calculator.calculate_aggregates(self.calculated_tim_data)
        assert aggregated_values == {
            "auto_total_intakes": 4,
            "auto_intakes_ground": 2,
            "auto_total_pieces": 6,
            "auto_total_failed_pieces": 0,
            "tele_total_intakes": 44,
            "total_intakes": 48,
        }

    def test_calculate_point_values(self):
        point_values = self.test_calculator.calculate_point_values(self.calculated_tim_data)
        assert point_values == {
            "auto_total_points": 38,
            "endgame_total_points": 0,
            "tele_total_points": 104,
            "total_points": 142,
        }

    def test_run_consolidation(self):
        self.test_server.local_db.delete_data("unconsolidated_totals")
        self.test_server.local_db.insert_documents(
            "unconsolidated_totals", self.unconsolidated_totals
        )
        with patch("tba_communicator.tba_request", return_value=self.tba_test_data):
            self.test_calculator.run()
        result = self.test_server.local_db.find("obj_tim")
        assert len(result) == 2
        calculated_tim = result[0]
        del calculated_tim["_id"]
        assert calculated_tim == {
            "flagged": False,
            "confidence_rating": 2,
            "alliance_color_is_red": True,
            "auto_coral_L1": 0,
            "auto_coral_L2": 0,
            "auto_coral_L3": 2,
            "auto_coral_L4": 2,
            "auto_drop_algae": 0,
            "auto_drop_coral": 0,
            "auto_fail_coral_L1": 0,
            "auto_fail_coral_L2": 0,
            "auto_fail_coral_L3": 0,
            "auto_fail_coral_L4": 0,
            "auto_fail_net": 0,
            "auto_fail_processor": 0,
            "auto_intake_ground_algae": 0,
            "auto_intake_ground_coral": 2,
            "auto_intake_reef": 2,
            "auto_intake_station": 0,
            "auto_intakes_ground": 2,
            "auto_net": 0,
            "auto_processor": 2,
            "auto_total_failed_pieces": 0,
            "auto_total_intakes": 4,
            "auto_total_pieces": 6,
            "cage_fail": False,
            "cage_level": "N",
            "expected_cycle_time": 135.0,
            "expected_cycles": 1,
            "has_preload": True,
            "match_number": 42,
            "median_cycle_time": 0,
            "scored_preload": False,
            "start_position": "1",
            "team_number": "254",
            "tele_coral_L1": 2,
            "tele_coral_L2": 2,
            "tele_coral_L3": 2,
            "tele_coral_L4": 2,
            "tele_drop_algae": 0,
            "tele_drop_coral": 0,
            "tele_fail_coral_L1": 0,
            "tele_fail_coral_L2": 2,
            "tele_fail_coral_L3": 0,
            "tele_fail_coral_L4": 0,
            "tele_fail_net": 0,
            "tele_fail_processor": 0,
            "tele_incap": 0,
            "tele_intake_ground_algae": 0,
            "tele_intake_ground_coral": 0,
            "tele_intake_reef": 42,
            "tele_intake_station": 2,
            "tele_intake_poach": 0,
            "tele_net": 12,
            "tele_processor": 2,
            "tele_total_failed_pieces": 0,
            "tele_total_intakes": 44,
            "tele_total_pieces": 10,
            "tele_total_points": 88,
            "total_intakes": 48,
            "total_pieces": 12,
            "total_points": 126,
            "total_failed_pieces": 0,
            "deep": False,
            "shallow": False,
            "park": True,
            "endgame_total_points": 0,
            "auto_total_points": 38,
        }

    @mock.patch("logging.Logger.warning", logging.getLogger(__name__).warning)
    def test_in_list_check1(self, caplog):
        with patch("tba_communicator.tba_request", return_value=self.tba_test_data):
            self.test_calculator.run()
        assert len([rec.message for rec in caplog.records if rec.levelname == "WARNING"]) > 0

    @mock.patch.object(obj_tims.ObjTIMCalcs, "update_calcs", return_value=[{}])
    @mock.patch("logging.Logger.warning", logging.getLogger(__name__).warning)
    def test_in_list_check2(self, update_calcs_dummy, caplog):
        with patch("tba_communicator.tba_request", return_value=self.tba_test_data):
            self.test_calculator.run()
        assert len([rec.message for rec in caplog.records if rec.levelname == "WARNING"]) == 1
