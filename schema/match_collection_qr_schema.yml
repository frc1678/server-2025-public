# Used for Match Collection QR compression by Match Collection App and QR decompression by Server
# QR is encoded in an Alphanumeric QR

# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 1

# Each decompressed variable name corresponds to a length 2 or 3 list
# First item is the compressed variable name
# Second item is server-side data type
# Third item (if it exists) is the type within the list, if a dict it requires specific implementation in decompressor
# Fourth item (if it exists) is the length of each item in a none-dict list, if not provided _list_data_separator is used as a separator
# Names starting with "_" do not correspond to a compressed variable, they are used to aid in (de)compression
_list_data_separator: "&"
# Data that is shared between the objective and subjective QRs. 
generic_data:
  _separator: '$' # Separates key:value pairs
  _section_separator: '%' # Separates generic from objective/subjective data
  schema_version: [A, int] # Must remain constant between versions
  match_number: [B, int]
  timestamp: [C, int]
  match_collection_version_number: [D, str]
  scout_name: [E, str]
  alliance_color_is_red: [F, bool]
  
  
# Data specific to objective match collection QR
objective_tim:
  _start_character: '+' # First character in QR used to identify QR type
  _separator: '$' # Separates key:value pairs
  team_number: [Z, str] # The team number
  scout_id: ['Y', int] # Used to determine which tablets have not submitted ('Y' in quotes because it's a keyword on its own)
  start_position: [X, str] # str representing where a robot starts in auto (1, 2, 3, or 4)
  timeline: [W, list, dict] # List of dictionaries
  has_preload: [V, bool] # bool representing if a robot has a preloaded note
  cage_level: [U, str] # str representing the cage level
  cage_fail: [T, bool] # bool representing if a robot failed to score in the cage
  park: [S, bool] # bool representing if a robot parked

# Timeline is part of objective match collection QR
# Data for an action in the timeline
# First value represents the length, second represents the target type, third represents the position within
# each action
timeline:
  # No separators within timeline to reduce QR size. Each action is a fixed 5-character length
  time: [3, int, 0] # Encoded in base 10. Always length 3, e.g. '051' for 51 seconds
  action_type: [2, "Enum[str]", 1] # Encoded in alphabet base 26. Always length 2, e.g. 'AJ' for the 10th action

# Data specific to subjective match collection QR
subjective_aim:
  _start_character: '*' # First character in QR used to identify QR type
  _separator: '$' # Separates each key:value pair
  _team_separator: '#' # Separates each team's section
  _alliance_data_separator: '^' # Separates team data from data about the entire alliance
  team_number: [A, str] # The team number
  agility_score: [B, int] # A ranking value between 1 and 3
  field_awareness_score: [C, int] # A ranking value between 1 and 3
  died: [G, bool]
  time_left_to_climb: [D, int]
  can_cross_barge: [E, bool]
  was_tippy: [I, bool]
  hp_from_team: [H, bool]

# Contains all the enums and their values
# Action type is a alphabet base 26 string representation
action_type:
  auto_reef: RR
  auto_drop_algae: AA
  auto_drop_coral: AB
  auto_intake_ground_1: AC
  auto_intake_ground_2: AD
  auto_intake_mark_1_coral: AE
  auto_intake_mark_2_coral: AF
  auto_intake_mark_3_coral: AG
  auto_intake_mark_1_algae: BK
  auto_intake_mark_2_algae: BI
  auto_intake_mark_3_algae: BJ
  auto_intake_reef_F1: AH
  auto_intake_reef_F2: AI
  auto_intake_reef_F3: AJ
  auto_intake_reef_F4: AK
  auto_intake_reef_F5: AL
  auto_intake_reef_F6: AM
  auto_intake_station_1: AN
  auto_intake_station_2: AO
  tele_coral_L1: AP
  tele_coral_L2: AQ
  tele_coral_L3: AR
  tele_coral_L4: BF
  tele_drop_algae: AS
  tele_drop_coral: AT
  tele_intake_ground: AU
  tele_intake_reef: AV
  tele_intake_station: AW
  tele_processor: AX
  tele_net: BG
  start_incap: AY
  end_incap: AZ
  to_teleop: BA
  to_endgame: BB
  auto_net: BC
  auto_processor: BD
  fail: BE
  tele_intake_poach: BH


super_compressed:
  auto_reef:
    template: auto{first}_score{second}{third}
    compressed:
      first:
        0: _fail
        1: 
      second:
        1: _F1
        2: _F2
        3: _F3
        4: _F4
        5: _F5
        6: _F6
      third:
        1: _L1
        2: _L2
        3: _L3
        4: _L4